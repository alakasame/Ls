/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: cmichaud <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2016/01/21 08:28:12 by cmichaud          #+#    #+#             */
/*   Updated: 2016/02/09 05:53:03 by cmichaud         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "ft_ls.h"


		free(path);
		path = tmp;
		if (isflag(flag, 'R') && file.path)
			nextmain(file.path, file.flag);
	}
	path = NULL;
	return (0);
}

int			main(int argc, char **argv)
{
	t_arg	sarg;
	t_l		*error;
	int		i;

	sarg.flag = NULL;
	sarg.path = NULL;
	sarg.file = NULL;
	error = NULL;
	i = searchflag(argv, &sarg.flag, argc);
	if (i + 1 == argc)
	{
		sarg.path = listadd(sarg.path, ".", NULL, sarg.flag);
		ft_putstr(sarg.path->str);
	}
	while (argc > ++i) // i = nb argvflag - 1 et flag is ok;
	{
		if (isopen(argv[i]))
			sarg.path = listadd(sarg.path, argv[i], ".", sarg.flag); // LIST ADD ok;
		else if (isfile(argv[i]))
			sarg.file = listadd(sarg.file, argv[i], ".", sarg.flag);
		else
			error = listadd(error, argv[i], NULL, NULL); // !!!!!! ON DOIT RECUP LS FILE
	}
	error = freeafflist(error);
	if (sarg.file)
		sarg.file = afffile(sarg.file, sarg.flag, ".");
	nextmain(sarg.path, sarg.flag);
	free(sarg.flag);
	return (0);
}
